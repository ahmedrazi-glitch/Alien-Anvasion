{"version":3,"file":"main.js","mappings":"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","sources":["webpack://alien-anvasion/./src/scripts/background.js","webpack://alien-anvasion/./src/scripts/people.js","webpack://alien-anvasion/./src/scripts/game.js","webpack://alien-anvasion/./src/scripts/projectile.js","webpack://alien-anvasion/./src/index.js"],"sourcesContent":["// import Game from './scripts/game.js';\n\n// class Background {\n//   constructor(gameWidth, gameHeight){\n//     this.gameWidth = gameWidth;\n//     this.gameHeight = gameHeight; \n//     const myInstance = new Game();\n//     this.img = myInstance.background;\n//     this.x = 0;\n//     this.y = 0;\n//     this.width = myInstance.DIM_X;\n//     this.height = myInstance.DIM_Y;\n//     this.speed = 10\n//   }\n\n//   draw(ctx){\n//     ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n//   }\n\n//   update(){\n//     this.x -= this.speed;\n//   }\n// }\n\n// export default Background;\n\n\n\n// import Game from './scripts/game.js';\n\n// class Background {\n//   constructor(gameWidth, gameHeight){\n//     this.gameWidth = gameWidth;\n//     this.gameHeight = gameHeight; \n//     const myInstance = new Game();\n//     this.img = myInstance.background.img;\n//     this.x = 0;\n//     this.y = 0;\n//     this.width = myInstance.DIM_X;\n//     this.height = myInstance.DIM_Y;\n//     this.speed = 10\n//   }\n\n//   draw(ctx){\n//     ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n//   }\n\n//   update(){\n//     this.x -= this.speed;\n//   }\n// }\n\n// export default Background;\n\n// import Game from './scripts/game.js';\n\nclass Background {\n  constructor(width, height) {\n    this.img = new Image();\n    this.img.src = \"assets/game/background3.webp\";\n    this.width = width;\n    this.height = height;\n    this.x = 0;\n    this.y = 0;\n  }\n\n  draw(ctx) {\n    ctx.drawImage(this.img, this.x, this.y, this.width, this.height);\n    ctx.drawImage(this.img, this.x + this.width, this.y, this.width, this.height);\n  }\n\n  update() {\n    this.x -= 3;\n    if (this.x < -this.width) {\n      this.x = 0;\n    }\n  }\n}\n\nexport default Background;\n\n\n","class People{\n  constructor(src, x){\n    this.person0 = new Image();\n    this.person0.src = src;\n    this.width = 50;\n    this.height = 60;\n    this.x = x;\n    this.y = 460;\n  }\n\n  draw(ctx){\n    // console.log(this.person0);\n    ctx.strokeStyle = \"white\";\n    ctx.strokeRect(this.x, this.y, this.width, this.height); \n    // ctx.beginPath();\n    // ctx.arc(this.x, this.y, );\n    // ctx.stroke();\n    ctx.drawImage(this.person0, this.x, this.y, this.width, this.height); \n  }\n\n  update(){\n    this.x -= 3;\n  }\n\n}\n\nexport default People;\n","import Background from \"./background\";\nimport People from \"./people\";\n// import HandleControls from \"./handleControls\";\nimport Projectile from \"./projectile\";\n\n\nclass Game {\n  constructor(canvas){\n    this.ctx = canvas.getContext(\"2d\");\n    this.background = new Background(canvas.width, canvas.height);\n    // this.background.src = \"assets/game/background3.webp\";\n    this.spaceship = new Image();\n    this.spaceship.src = \"assets/game/spaceship.png\";\n    // this.people = new People(canvas.width, canvas.height);\n    // this.person0 = new Image();\n    // this.person0.src = \"assets/game/person0.png\";\n    // this.person1 = new Image();\n    // this.person1.src = \"assets/game/person1.png\";\n    this.firstGame = true;\n    this.people = [];\n    this.x = 1180;\n    this.y = 475;\n    this.a = 1180;\n    this.b = 475;\n    this.projectiles = [];\n    this.handlePeople();\n    this.gameover = false;\n    // const input = new HandleControls();\n  }\n\n  static DIM_X = 1200;\n  static DIM_Y = 600;\n\n  // const input = new HandleControls();\n\n  handlePeople(){\n    let startPos = 2280;\n    for(let i = 1; i < 6; i += 1){\n      let person = new People(`assets/game/person${i}.png`, startPos);\n      this.people.push(person);\n      startPos += 300;\n    }\n  }\n\n  handleClick(){  \n    window.addEventListener('keydown', e => {\n      console.log(e);\n      if (e.key === \" \" && this.projectiles.length <= 5){\n        let newProjectile = new Projectile(150, 175, 500, 0, 10);\n        this.projectiles.push(newProjectile);\n      }\n    });\n    console.log(this.projectiles);\n  }\n  \n  // animate() {\n  //   this.x -= 1;  \n \n  //   this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y); \n  //   this.ctx.drawImage(this.background, 0, 0, Game.DIM_X, Game.DIM_Y); \n  //   this.background.update();\n  //   this.ctx.drawImage(this.spaceship, 100, 100, 100, 100); \n  //   this.ctx.drawImage(this.human, this.x, this.y, 50, 40); \n\n  //   requestAnimationFrame(this.animate.bind(this));\n\n  // }\n\n  animate() {\n    this.x -= 3;\n   \n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y); \n    this.background.update();\n    this.background.draw(this.ctx); // draw the background instance\n    this.ctx.drawImage(this.spaceship, 100, 100, 100, 100); // draw the spaceship instace\n    // this.ctx.drawImage(this.person0, this.x, this.y, 50, 40);\n    this.people.forEach(person => {  // will draw each person after some distance, in the line. \n      person.update(); \n      person.draw(this.ctx); \n    });\n\n    this.projectiles.forEach(projec => {\n      projec.update(2);\n      projec.draw(this.ctx);\n    });\n\n    for (let i = 0; i < this.projectiles.length; i++) {\n      for (let j = 0; j < this.people.length; j++) {\n        const singleProjectile = this.projectiles[i];\n        const singlePerson = this.people[j];\n        // singleProjectile.update(); // update projectile position\n        // singlePerson.update(); // update person position\n        // const dx = singleProjectile.x - singlePerson.x;  \n        // console.log(dx);  \n        // console.log(\"this is distance between a singleProjectile and singlePerson.\");\n        // const dy = singleProjectile.y - singlePerson.y;  \n        // console.log(dy);  \n\n        if (singleProjectile.y + 5 === singlePerson.x) {\n          console.log(\"collision\");\n          // this.projectiles.splice(i, 1);\n          // this.people.splice(j, 1);\n        }\n        // } else {\n        //   continue;  \n        // }\n        // console.log(\"this is distance between a singleProjectile and singlePerson.\");\n        // singleProjectile.update();  \n        // const dx = singleProjectile.y = singlePerson.x;  \n        // console.log(dx);\n        // const distance = Math.sqrt(dx * dx + dy * dy);   \n        \n        // if (distance < singleProjectile.width/2 + singlePerson.width/2){\n        //   this.gameover = true;  \n        //   console.log('gameOver');   \n        // }\n\n        // if (singleProjectile.checkCollision(singlePerson) === true ) {\n        //   console.log(true);\n        //   // Handle collision here\n        //   // For example, remove the projectile and person from their arrays\n        //   this.projectiles.splice(i, 1);\n        //   this.people.splice(j, 1);\n        // } else if (singleProjectile.checkCollision(singlePerson) === false) {\n        //   console.log(false);\n        // }\n      }\n    }\n\n    this.ctx.beginPath();\n    this.ctx.ellipse(150, 500, 35, 65, 30, 60, 45, 15, Math.PI * 2);\n    this.ctx.fillStyle = \"rgba(255, 255, 255, 0.5)\";\n    this.ctx.fill();\n  \n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  draw() {\n    this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n    // this next line of code will draw the background of the game.\n    this.ctx.drawImage(this.img, 0, 0, Game.DIM_X, Game.DIM_Y);\n    // this will draw the ufo in the upperleft corner of the canvas.\n    this.ctx.filter = \"blur(50px)\";\n    this.ctx.drawImage(this.spaceship, 100, 100, 100, 100);\n    // this should draw a human on the canvas\n    // this.ctx.drawImage(this.human, this.x, this.y, 50, 40);\n    this.background.update();\n  }\n\n  start(){\n    if(this.firstGame) { \n      // this.intervalId = setInterval(this.draw.bind(this, this.ctx), 100);\n      this.handleClick();\n      this.animate();\n      this.firstGame = false;\n    } else {\n      clearInterval(this.intervalId);\n      this.restartGame();\n    }\n  }\n\n  restartGame() {\n    // Define restart logic here.\n    // this.endScreen.style.display = \"none\";\n    // clearInterval(this.intervalId);\n    // this.intervalId = setInterval(this.bind(ctx), 100);\n    // this.intervalId = setInterval(this.bind(this), 100);\n  }\n  \n}\n\nexport default Game\n\n// class Game {\n//   constructor(canvas) {\n//     this.ctx = canvas.getContext(\"2d\");\n//     this.background = new Image();\n//     this.background.src = \"assets/game/background3.webp\";\n//     this.spaceship = new Image();\n//     this.spaceship.src = \"assets/game/spaceship.png\";\n//     this.human = new Image();\n//     this.human.src = \"assets/game/human.png\";\n//     this.firstGame = true;\n//     this.x = 1180;\n//     this.y = 500;\n//   }\n\n//   static DIM_X = 1200;\n//   static DIM_Y = 600;\n\n//   animate() {\n//     // Move human image from right to left\n//     this.x -= 1;\n\n//     // Clear canvas and draw images\n//     this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n//     this.ctx.drawImage(this.background, 0, 0, Game.DIM_X, Game.DIM_Y);\n//     this.ctx.drawImage(this.spaceship, 100, 100, 100, 100);\n//     this.ctx.drawImage(this.human, this.x, this.y, 50, 40);\n\n//     // Call animate() recursively to create an animation loop\n//     requestAnimationFrame(this.animate.bind(this));\n//   }\n\n//   draw() {\n//     this.ctx.clearRect(0, 0, Game.DIM_X, Game.DIM_Y);\n//     this.ctx.drawImage(this.background, 0, 0, Game.DIM_X, Game.DIM_Y);\n//     this.ctx.drawImage(this.spaceship, 100, 100, 100, 100);\n//     this.ctx.drawImage(this.human, this.x, this.y, 50, 40);\n//   }\n\n//   start() {\n//     if (this.firstGame) {\n//       this.animate();\n//       this.firstGame = false;\n//     } else {\n//       clearInterval(this.intervalId);\n//       this.restartGame();\n//     }\n//   }\n\n//   restartGame() {\n//     // Define restart logic here.\n//   }\n// }\n\n// export default Game;","class Projectile {\n  constructor(x, y, vx, vy, damage) {\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n    this.damage = damage;\n    this.people = [];\n  }\n\n  update(dt) {\n    // Update the projectile's position based on its velocity and the elapsed time\n    // this.x += this.vx * dt;\n    // this.y += this.vy * dt;\n    this.y += 2;\n  }\n\n  draw(ctx) {\n    // Draw the projectile as a small circle\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 5, 0, 2 * Math.PI);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n  }\n\n  // checkCollision(person) {\n  //   if (person.x === this.x){\n  //     return 'hello';\n  //   }\n  // }\n}\n\nexport default Projectile;","import Game from './scripts/game.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\nconsole.log('hi');\n  const canvas = document.getElementById(\"canvas-tag\");\n  const ctx = canvas.getContext('2d');\n\n  const homeScreen = document.querySelector(\".home-screen\");\n  const startButton = document.getElementById(\"start-button\");\n  const instrucButton = document.getElementById(\"instructions-button\");\n  const canvasSelect = document.getElementById(\"canvas-tag\");\n\n  function draw(ctx) {\n    ctx.fillStyle = \"rgba(255, 255, 255, 0.1)\";\n    ctx.fillRect(0, 0, 1200, 600);\n  }\n  draw(ctx);\n\n  const game = new Game(canvasSelect);\n\n  startButton.addEventListener(\"click\", function() {\n    homeScreen.style.display = \"none\";\n    canvasSelect.style.display = \"block\";\n    canvasSelect.classList.remove(\"hidden\");\n\n    game.start();\n  });\n\n  instrucButton.addEventListener(\"click\", function() {\n    homeScreen.style.display = \"none\";\n    instrucButton.style.display = \"block\";\n  });\n // input for testing purposes\n\n//  homeScreen.style.display = \"none\";\n//  canvasSelect.style.display = \"block\";\n//  canvasSelect.classList.remove(\"hidden\");\n\n//   game.start();\n\n \n // everything above is for testing purposes\n});\n\n // ctx.fillStyle = 'transparent';\n    // ctx.fillRect(0, 0, 1200, 600);\n    // ctx.clearRect(45, 45, 60, 60);\n    // ctx.strokeRect(50, 50, 50, 50);\n  // }\n\n  // ctx.fillText(\"This is an Alien Anvasion\", 25, 50)\n    // ctx.beginPath();\n    // ctx.arc(75, 75, 25, 0, 2*Math.PI);\n    // ctx.stroke;\n    // ctx.fillStyle = \"red\";\n    // ctx.fill();\n\n  // const img = new Image();\n  // img.src = 'spaceship.png';\n  // img.onload = () => {\n  // ctx.drawImage(img, 0, 0);\n  // };\n\n\n// console.log(canvas);\n\n\n\n// const canvass = document.getElementById('my_game');\n//   console.log(canvass);\n//   const ctx = canvass.getContext('2d');\n//   ctx.beginPath();\n//   ctx.arc(75, 75, 25, 0, 2*Math.PI);\n//   ctx.stroke();\n//   ctx.fillStyle = 'blue';\n//   ctx.fill();\n//   window.ctx = ctx;\n\n// ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n// ctx.fillStyle = '#000000';\n\n\n"],"names":["constructor","src","x","this","person0","Image","width","height","y","draw","ctx","strokeStyle","strokeRect","drawImage","update","Game","canvas","getContext","background","img","spaceship","firstGame","people","a","b","projectiles","handlePeople","gameover","startPos","i","person","People","push","handleClick","window","addEventListener","e","console","log","key","length","newProjectile","vx","vy","damage","dt","beginPath","arc","Math","PI","fillStyle","fill","animate","clearRect","DIM_X","DIM_Y","forEach","projec","j","singleProjectile","singlePerson","ellipse","requestAnimationFrame","bind","filter","start","clearInterval","intervalId","restartGame","_defineProperty","document","getElementById","homeScreen","querySelector","startButton","instrucButton","canvasSelect","fillRect","game","style","display","classList","remove"],"sourceRoot":""}